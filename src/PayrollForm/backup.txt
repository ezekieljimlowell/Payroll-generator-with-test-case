 id={data.id}
                        employeeName={data.empName}
                        employeeCode={data.empCode}
                        department={data.department}
                        designation={data.designation}
                        paidDays={data.paidDays}
                        lop={data.lop}
                        uanNumber={data.uanNumber}
                        aadharNumber={data.aadharNumber}
                        address={data.address}
                        month={data.month}
                        accountNumber={data.accountNumber}
                        hra={data.hra}
                        basic={data.basic}
                        conveyanceAllowance={data.conveyanceAllowance}
                        specialAllowance={data.specialAllowance}
                        bonus={data.bonus}
                        pfAmount={data.pfAmount}
                        esi={data.esi}
                        professionalTax={data.professionalTax}
                        key={data.id}


{arrayOfObject.length > 0 && arrayOfObject.map(data => {
                return (
                    <EmployeeTable/>
                )
            })}


            {arrayOfObject.length > 0 && arrayOfObject.map(data => {
                return (
                    <EmployeeTable
                        id={data.id}
                        employeeName={data.empName}
                        employeeCode={data.empCode}
                        department={data.department}
                        designation={data.designation}
                        paidDays={data.paidDays}
                        lop={data.lop}
                        uanNumber={data.uanNumber}
                        aadharNumber={data.aadharNumber}
                        address={data.address}
                        month={data.month}
                        accountNumber={data.accountNumber}
                        hra={data.hra}
                        basic={data.basic}
                        conveyanceAllowance={data.conveyanceAllowance}
                        specialAllowance={data.specialAllowance}
                        bonus={data.bonus}
                        pfAmount={data.pfAmount}
                        esi={data.esi}
                        professionalTax={data.professionalTax}
                        key={data.id}
                    />
                )
            })}

            const { id, employeeName, employeeCode, department,
        designation, paidDays, lop, uanNumber,
        aadharNumber, address, month, accountNumber,
        hra, basic, conveyanceAllowance, specialAllowance,
        bonus, pfAmount, esi, professionalTax } = props;

        const { employeeName, employeeCode, address, aadharNumber, month,
        department, pfNumber, paidDays, lop, uanNumber, designation,
        accountNumber, hra, basic, conveyanceAllowance, specialAllowance,
        bonus, pfAmount, esi, professionalTax } = props;

        <Space direction="vertical">
                            <DatePicker
                                format="MM/YYYY"
                                picker="month"
                                onChange={handleBasicData}
                                defaultValue={moment(basicData.month, "MM/YYYY")}
                                placeholder="month"
                            />
                        </Space>

Month input
const isMozillaFirefox = typeof InstallTrigger !== 'undefined';
    const isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })
        (!window['safari'] || (typeof safari !== 'undefined' && window['safari'].pushNotification));
    
    validate function inside:

    let monthError = "";

    case (basicData.month === ""):
                const monthInput = document.querySelector("input[name = month]");
                monthInput.focus();
                monthError = "Month should not be empty";
                break;


    default case:
    setErrors({
     monthError: "",
    })

    if(monthError);

    setErrors({
        monthError: monthError,
    })


    <div className="form-row">
                    <label>Month </label>
                    <div className="col-6">
                        {/*{(!isMozillaFirefox && !isSafari) && <input type="month" className="form-control" onChange={handleBasicData}
                            name="month" value={basicData.month} placeholder="month"></input>}
                        {(isMozillaFirefox || isSafari) && <input type="date" name="month" className="form-control"
    onChange={handleBasicData} value={basicData.month} placeholder="month"></input>}*/}
                        <Space direction="vertical">
                            <DatePicker
                                format="MM/YYYY"
                                picker="month"
                                onChange={(date, dateString) => handleDate(date, dateString)}
                                //defaultValue={moment(basicData.month ? basicData.month : "01/2020", "MM/YYYY")}
                                defaultValue={moment("01/2020", "MM/YYYY")}
                                placeholder="month"
                                name="month"
                                data-testid = "date-picker"
                            />
                        </Space>
                        {errors.monthError && <span>{errors.monthError}</span>}
                    </div>
                </div>

